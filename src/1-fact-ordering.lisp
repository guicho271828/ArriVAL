

(in-package :arrival)

(defun package< (a b)
  (match* (a b)
    (((package :name n1) (package :name n2))
     (when (string< n1 n2) t))))
(defun package= (a b)
  (eq a b))

(defun symbol< (a b)
  (match* (a b)
    (((symbol :package p1) (symbol :package p2))
     (cond
       ((and (not p1) (not p2))
        (when (string< a b) t))
       ((and (not p1) p2)
        t)
       ((and p1 (not p2))
        nil)
       ((and p1 p2)
        (or (package< p1 p2)
            (and (package= p1 p2)
                 (when (string< a b) t))))))))
(defun symbol= (a b)
  (eq a b))

(defun fact< (arg1 arg2)
  (match* (arg1 arg2)
    (((cons car1 cdr1) (cons car2 cdr2))
     (or (fact< car1 car2)
         (and (equalp car1 car2)
              (fact< cdr1 cdr2))))
    ((nil (cons _ _))
     t)
    (((cons _ _) nil)
     nil)
    ((nil nil)
     nil)
    (((symbol) (symbol))
     (symbol< arg1 arg2))))
(defun fact= (arg1 arg2)
  (equalp arg1 arg2))
