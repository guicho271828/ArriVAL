
Test cases for plan validation, type checking and reverse
Skolemisation (compiling away object fluents).

axioms/

Examples of problems with derived predicates (axioms).

bw-axioms-THN.pddl: Formulation of Blocksworld with derived predicates
by Thiebaux, Hoffmann and Nebel (from the AIJ 2005 paper). The domain
includes the definition of a recursive axiom ("above") but which is
not used. bw-axioms-small.pddl is a small sample instance.

disjunction.pddl: An illustration of how reasoning about the values of
derived predicates may require reasoning about the true/false
disjunction over basic state variables. disjunction{1,2}.pddl are
sample problems, one unsolvable and the other solvable.

mst.pddl: Minimum spanning tree problem. Uses several strata of
axioms. mst{1,2}.pddl are sample instances.

blocker-{adl,strips}.pddl: The blocking game ("chat noir").
blocker-strips-{small,12}.pddl are sample problems; bmgen.py is an
instance generator for a particular class of instances. The ADL
formulation of the domain moves the cat as a (conditional) side-effect
of the blocking aciton. It should work with the same problem files as
the STRIPS formulation

social.pddl, iago-{1,2}.pddl: Domain and two sample instances for
"social planning with a theory of mind". These are based loosely on
the example of Shakespear's play Othello, used in "Simulation-Based
Story Generation with a Theory of Mind" (AIIDE 2008), by Hsueh-Min
Chang and Von-Wun Soo. The PDDL encoding was written entirely by
Patrik Haslum.  Chang and Soo did not formulate the full model in
PDDL, and did not make their partial model publicly available.

fs/

Examples from Hector Geffner's Functional Strips paper, encoded in
PDDL3.1, i.e., using object fluents. Also an additional example
(lists.pddl), making more complicated use of object fluents.

typing/

Example problems to illustrate some areas of confusion over the
semantics of typing in PDDL.

domain-1/2, problem-1+2 and plan-1+2: Use of (either..) in type
declarations. If (either..) types in declarations are interpreted as
conjunctive, the plan is accepted with both domain definitions (VAL
does this, as does INVAL with default settings). If they are
interpreted as disjunctions (*either-in-declarations-means-and* set to
nil in INVAL), the plan is invalid using domain-1.

domain-3, problem-3 and plan-3: Malte Helmert's example, illustrating
how the disjunctive interpretation of (either..) types in declarations
can be used to encode an incomplete (disjunctive) initial state.
